# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "LeaveMeAlone Code Analyze"

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest

    permissions:
      actions: write
      contents: write
      security-events: write

    env:
      Solution_Name: LeaveMeAlone.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      #Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: LeaveMeAloneWAP    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: LeaveMeAloneWAP\LeaveMeAloneWAP.wapproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
        configuration: [ Release ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe with new add-path
      # You may pin to the exact commit or the version.
      # uses: Dana-Woo/Setup-MSBuild@786ea5b2f0ab0960bfeb261391b1f307f1e4bb80
      uses: Dana-Woo/Setup-MSBuild@v1.1

    # Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        
    #- name: Autobuild
     # uses: github/codeql-action/autobuild@v1
      
    # Create the app package by building and packaging the Windows Application Packaging project
  #  - name: Create the app package
  #    run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
  #    env:
  #      Appx_Bundle: Never
  #      Appx_Bundle_Platforms: x86|x64
  #      Appx_Package_Build_Mode: SideLoadOnly
  #      Configuration: ${{ matrix.configuration }}

    - run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:UseSharedCompilation=false
      env:
            Appx_Bundle: Never
            Appx_Bundle_Platforms: x86|x64
            Appx_Package_Build_Mode: SideLoadOnly
            Configuration: ${{ matrix.configuration }}
 #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
